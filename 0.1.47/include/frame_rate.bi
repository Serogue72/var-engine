
constructor udt_FRAME_RATE()
  INPUT.FPS_CAP = 100
  GFX.FPS_CAP = 24
  
  INPUT.FPS_RESOLUTION = 1 / INPUT.FPS_CAP
  GFX.FPS_RESOLUTION = 1 / GFX.FPS_CAP
  
  SLEEP_TIME_DEFAULT = 1000 / INPUT.FPS_CAP
  SLEEP_TIME_PREVIOUS = SLEEP_TIME_DEFAULT
end constructor

sub udt_FRAME_RATE.START()
  INPUT.CYCLE_TIMER_PREVIOUS = timer
  GFX.CYCLE_TIMER_PREVIOUS = INPUT.CYCLE_TIMER_PREVIOUS
end sub

sub udt_FRAME_RATE.REGULATE()
  INPUT.FRAME_COUNTER += 1
  INPUT.CYCLE_TIMER = timer
  
  GFX.CYCLE_TIMER_DIFFERENCE = INPUT.CYCLE_TIMER - GFX.CYCLE_TIMER_PREVIOUS
  if GFX.CYCLE_TIMER_DIFFERENCE > GFX.FPS_RESOLUTION then
    GFX.CYCLE_TIMER_PREVIOUS += GFX.FPS_RESOLUTION
    GFX.FRAME_COUNTER += 1
    RENDER = TRUE
  end if
  
  INPUT.CYCLE_TIMER_DIFFERENCE = INPUT.CYCLE_TIMER - INPUT.CYCLE_TIMER_PREVIOUS
  if INPUT.CYCLE_TIMER_DIFFERENCE > 1 then
    INPUT.CYCLE_TIMER_PREVIOUS += 1
    INPUT.FRAME_COUNTER_SUM = INPUT.FRAME_COUNTER
    INPUT.FRAME_COUNTER = 0
    GFX.FRAME_COUNTER_SUM = GFX.FRAME_COUNTER
    GFX.FRAME_COUNTER = 0
  end if
  
  SLEEP_TIME = SLEEP_TIME_PREVIOUS + ( ( INPUT.FPS_RESOLUTION - INPUT.CYCLE_TIMER + INPUT.FRAME_TIMER_PREVIOUS ) * 1000 )
  INPUT.FRAME_TIMER_PREVIOUS = INPUT.CYCLE_TIMER
  
  if SLEEP_TIME < 1 then
    SLEEP_TIME = 1
  elseif SLEEP_TIME > SLEEP_TIME_DEFAULT then
    SLEEP_TIME = SLEEP_TIME_DEFAULT
  end if
  
  sleep SLEEP_TIME, 1
  SLEEP_TIME_PREVIOUS = SLEEP_TIME
  
end sub